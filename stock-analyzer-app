import requests
import pandas as pd
import streamlit as st

# --- Configuration ---
VS_CURRENCY = "usd"
RSI_PERIOD = 14
SMA_SHORT = 7
SMA_LONG = 14
EMA_PERIOD = 10

# --- Helper Functions ---
def calculate_rsi(series: pd.Series, period: int = 14) -> pd.Series:
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_macd(series: pd.Series) -> tuple[pd.Series, pd.Series]:
    ema12 = series.ewm(span=12, adjust=False).mean()
    ema26 = series.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

def calculate_obv(prices: pd.Series, volumes: pd.Series) -> pd.Series:
    obv = [0]
    for i in range(1, len(prices)):
        if prices.iloc[i] > prices.iloc[i - 1]:
            obv.append(obv[-1] + volumes.iloc[i])
        elif prices.iloc[i] < prices.iloc[i - 1]:
            obv.append(obv[-1] - volumes.iloc[i])
        else:
            obv.append(obv[-1])
    return pd.Series(obv, index=prices.index)

def score_stock(prices: pd.Series, volumes: pd.Series) -> float:
    df = pd.DataFrame({"Close": prices, "Volume": volumes})
    df["RSI"] = calculate_rsi(df["Close"], period=RSI_PERIOD)
    df["SMA_Short"] = df["Close"].rolling(SMA_SHORT).mean()
    df["SMA_Long"] = df["Close"].rolling(SMA_LONG).mean()
    df["EMA"] = df["Close"].ewm(span=EMA_PERIOD, adjust=False).mean()
    df["MACD"], df["Signal"] = calculate_macd(df["Close"])
    df["OBV"] = calculate_obv(df["Close"], df["Volume"])
    df = df.dropna()
    if df.empty:
        return 0.0

    latest = df.iloc[-1]
    score = 0.0

    # RSI rules
    if latest["RSI"] < 30:
        score += 15
    elif latest["RSI"] > 70:
        score -= 10

    # Moving averages crossover
    if latest["SMA_Short"] > latest["SMA_Long"]:
        score += 10

    # MACD direction
    if latest["MACD"] > latest["Signal"]:
        score += 10

    # Price above its mean
    if latest["Close"] > df["Close"].mean():
        score += 5

    # OBV direction
    if latest["OBV"] > df["OBV"].mean():
        score += 5

    return round(score, 2)

# --- Streamlit UI ---
st.title("ðŸ“Š Stock Analyzer App")
st.markdown(
    """
    Enter a stock ticker symbol, number of shares, and purchase price to:
    1. Evaluate key technical indicators (RSI, SMA, EMA, MACD, OBV).  
    2. Compute P&L (both absolute and percentage).  
    3. Identify candlestick patterns and day-trading signals.  
    4. Suggest entry, stop-loss (5%), and a 2R take-profit.  
    5. Show P&L prediction and a simple bar chart.
    """
)

# --- Ticker Selection ---
ticker = st.selectbox(
    "Choose a stock ticker or type your own:",
    options=["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NFLX", "NVDA", "INTC", "Custom..."],
    index=0
)
if ticker == "Custom...":
    custom_ticker = st.text_input("Enter custom stock ticker symbol:").upper().strip()
    if custom_ticker:
        ticker = custom_ticker
    else:
        ticker = ""

shares = st.number_input("Enter number of shares:", min_value=1, step=1)
purchase_price = st.number_input("Enter purchase price per share:", min_value=0.0, format="%.2f")

if st.button("Analyze Stock"):
    if not ticker:
        st.warning("Please enter a valid ticker symbol before analyzing.")
    else:
        st.info(f"Fetching data for {ticker}...")
        url = f"https://query1.finance.yahoo.com/v8/finance/chart/{ticker}?range=1mo&interval=1d"
        r = requests.get(url)

        if r.status_code != 200:
            st.error(f"Failed to fetch data for {ticker}. Status code: {r.status_code}")
        else:
            data = r.json()
            # Basic JSON-structure check
            if (
                "chart" not in data
                or "result" not in data["chart"]
                or not data["chart"]["result"]
                or "indicators" not in data["chart"]["result"][0]
                or "quote" not in data["chart"]["result"][0]["indicators"]
            ):
                st.error("Unexpected response format from Yahoo Finance. The ticker may be invalid or no data available.")
            else:
                try:
                    ohlc = data["chart"]["result"][0]["indicators"]["quote"][0]
                    opens = pd.Series(ohlc["open"]).fillna(method="ffill")
                    highs = pd.Series(ohlc["high"]).fillna(method="ffill")
                    lows = pd.Series(ohlc["low"]).fillna(method="ffill")
                    closes = pd.Series(ohlc["close"]).fillna(method="ffill")
                    volumes = pd.Series(ohlc["volume"]).fillna(method="ffill")
                    prices = closes.copy()

                    # Calculate technical score
                    score = score_stock(prices, volumes)
                    current_price = prices.iloc[-1]

                    # P&L calculation
                    pnl = (current_price - purchase_price) * shares
                    st.metric("Current Price", f"${current_price:.2f}")
                    if purchase_price > 0:
                        pct_change = (pnl / (purchase_price * shares)) * 100
                        st.metric("P&L", f"${pnl:.2f}", delta=f"{pct_change:.2f}%")
                    else:
                        st.metric("P&L", f"${pnl:.2f}", delta="n/a")

                    st.write(f"**Technical Score:** {score}")

                    # All-time high/low (over last 1 month)
                    all_time_high = prices.max()
                    all_time_low = prices.min()
                    st.metric("All-Time High (1mo)", f"${all_time_high:.2f}")
                    st.metric("All-Time Low (1mo)", f"${all_time_low:.2f}")

                    # --- Candlestick Pattern Analysis ---
                    pattern = ""
                    if len(prices) >= 2:
                        # Doji
                        body = abs(opens.iloc[-1] - closes.iloc[-1])
                        candle_range = highs.iloc[-1] - lows.iloc[-1]
                        if body < 0.02 * closes.iloc[-1] and candle_range > 3 * body:
                            pattern = "Doji â€” Market indecision"
                        # Bullish Engulfing
                        elif (
                            closes.iloc[-1] > opens.iloc[-1]
                            and opens.iloc[-1] < lows.iloc[-2]
                            and closes.iloc[-1] > highs.iloc[-2]
                        ):
                            pattern = "Bullish Engulfing â€” Possible upward reversal"
                        # Bearish Engulfing
                        elif (
                            closes.iloc[-1] < opens.iloc[-1]
                            and opens.iloc[-1] > highs.iloc[-2]
                            and closes.iloc[-1] < lows.iloc[-2]
                        ):
                            pattern = "Bearish Engulfing â€” Possible downward reversal"
                        # Shooting Star
                        elif (
                            (highs.iloc[-1] - max(opens.iloc[-1], closes.iloc[-1])) > 2 * body
                            and (min(opens.iloc[-1], closes.iloc[-1]) - lows.iloc[-1]) < 0.1 * closes.iloc[-1]
                        ):
                            pattern = "Shooting Star â€” Bearish signal"
                        # Hammer
                        elif (
                            (min(opens.iloc[-1], closes.iloc[-1]) - lows.iloc[-1]) > 2 * body
                            and (highs.iloc[-1] - max(opens.iloc[-1], closes.iloc[-1])) < 0.1 * closes.iloc[-1]
                        ):
                            pattern = "Hammer â€” Bullish signal"

                    if pattern:
                        st.subheader("Candlestick Pattern")
                        st.success(pattern)

                    # --- Day Trading Signal ---
                    day_trade_signal = ""
                    if len(prices) >= 2:
                        recent_gain = closes.iloc[-1] - opens.iloc[-1]
                        previous_gain = closes.iloc[-2] - opens.iloc[-2]
                        gap = opens.iloc[-1] - closes.iloc[-2]

                        if gap > 0 and recent_gain > 0:
                            day_trade_signal = "Gap Up + Bullish Close â€” Potential intraday momentum"
                        elif gap < 0 and recent_gain < 0:
                            day_trade_signal = "Gap Down + Bearish Close â€” Caution: possible selloff"
                        elif (
                            abs(recent_gain) < 0.005 * closes.iloc[-1]
                            and (highs.iloc[-1] - lows.iloc[-1]) > 0.02 * closes.iloc[-1]
                        ):
                            day_trade_signal = "Inside Bar / Low Volatility â€” Watch for breakout"

                    if day_trade_signal:
                        st.subheader("Day Trading Signal")
                        st.info(day_trade_signal)

                    # --- Suggested Trade Setup (Entry, Stop-Loss, Take-Profit) ---
                    entry_price = closes.iloc[-1]
                    stop_loss = lows.iloc[-1] - (0.05 * closes.iloc[-1])  # 5% below close
                    take_profit = closes.iloc[-1] + (0.02 * closes.iloc[-1])  # 2% above close (2R)

                    st.subheader("Trade Setup")
                    st.write(f"**Suggested Entry:** ${entry_price:.2f}")
                    st.write(f"**Stop Loss (5% below):** ${stop_loss:.2f}")
                    st.write(f"**Take Profit (2R, +2%):** ${take_profit:.2f}")

                    # --- P&L Prediction ---
                    risk_per_share = entry_price - stop_loss
                    reward_per_share = take_profit - entry_price
                    max_loss = risk_per_share * shares
                    max_gain = reward_per_share * shares

                    st.subheader("P&L Prediction")
                    st.write(f"**Maximum Loss:** ${max_loss:.2f}")
                    st.write(f"**Maximum Gain:** ${max_gain:.2f}")

                    # --- P&L Visualization ---
                    df_pnl = pd.DataFrame({
                        "Scenario": ["Max Loss", "Max Gain"],
                        "P&L ($)": [max_loss, max_gain]
                    }).set_index("Scenario")
                    st.bar_chart(df_pnl)

                except Exception as e:
                    st.error(f"Error processing data: {e}")
