import requests
import pandas as pd
import time
import streamlit as st

VS_CURRENCY = "usd"
RSI_PERIOD = 14
SMA_SHORT = 7
SMA_LONG = 14
EMA_PERIOD = 10



def calculate_rsi(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def calculate_macd(series):
    ema12 = series.ewm(span=12, adjust=False).mean()
    ema26 = series.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

def calculate_obv(prices, volumes):
    obv = [0]
    for i in range(1, len(prices)):
        if prices[i] > prices[i - 1]:
            obv.append(obv[-1] + volumes[i])
        elif prices[i] < prices[i - 1]:
            obv.append(obv[-1] - volumes[i])
        else:
            obv.append(obv[-1])
    return pd.Series(obv)

def score_stock(prices, volumes):
    df = pd.DataFrame({"Close": prices, "Volume": volumes})
    df["RSI"] = calculate_rsi(df["Close"])
    df["SMA_Short"] = df["Close"].rolling(SMA_SHORT).mean()
    df["SMA_Long"] = df["Close"].rolling(SMA_LONG).mean()
    df["EMA"] = df["Close"].ewm(span=EMA_PERIOD, adjust=False).mean()
    df["MACD"], df["Signal"] = calculate_macd(df["Close"])
    df["OBV"] = calculate_obv(df["Close"], df["Volume"])
    df = df.dropna()
    if df.empty:
        return 0
    latest = df.iloc[-1]
    score = 0
    if latest["RSI"] < 30:
        score += 15
    elif latest["RSI"] > 70:
        score -= 10
    if latest["SMA_Short"] > latest["SMA_Long"]:
        score += 10
    if latest["MACD"] > latest["Signal"]:
        score += 10
    if latest["Close"] > df["Close"].mean():
        score += 5
    if latest["OBV"] > df["OBV"].mean():
        score += 5
    return round(score, 2)

st.title("ðŸ“Š Stock Analyzer App")
st.markdown("Enter a stock ticker symbol, number of shares, and purchase price to analyze technicals and calculate your profit/loss.")

ticker = st.selectbox(
    "Choose a stock ticker or type your own:",
    options=["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NFLX", "NVDA", "INTC", "Custom..."],
    index=0
)

if ticker == "Custom...":
    ticker = st.text_input("Enter custom stock ticker symbol:").upper()
shares = st.number_input("Enter number of shares:", min_value=1, step=1)
purchase_price = st.number_input("Enter purchase price per share:", min_value=0.0, format="%.2f")

if st.button("Analyze Stock"):
    st.info(f"Fetching data for {ticker}...")
    url = f"https://query1.finance.yahoo.com/v8/finance/chart/{ticker}?range=1mo&interval=1d"
    r = requests.get(url)
    if r.status_code != 200:
        st.error(f"Failed to fetch data for {ticker}. Status code: {r.status_code}")
    else:
        data = r.json()
        try:
            ohlc = data["chart"]["result"][0]["indicators"]["quote"][0]
            opens = pd.Series(ohlc["open"]).fillna(method="ffill")
            highs = pd.Series(ohlc["high"]).fillna(method="ffill")
            lows = pd.Series(ohlc["low"]).fillna(method="ffill")

            volumes = data["chart"]["result"][0]["indicators"]["quote"][0]["volume"]
            closes = pd.Series(prices).fillna(method="ffill")
            prices = closes
            volumes = pd.Series(volumes).fillna(method="ffill")
            score = score_stock(prices, volumes)
            current_price = prices.iloc[-1]
            pnl = (current_price - purchase_price) * shares
            st.metric("Current Price", f"${current_price:.2f}")
            st.metric("P&L", f"${pnl:.2f}", delta=f"{(pnl / (purchase_price * shares)) * 100:.2f}%")
            st.write(f"Score: {score}")

            all_time_high = prices.max()
            all_time_low = prices.min()
            st.metric("All-Time High", f"${all_time_high:.2f}")
            st.metric("All-Time Low", f"${all_time_low:.2f}")

            # Candlestick Pattern Analysis
            pattern = ""
            if abs(opens.iloc[-1] - closes.iloc[-1]) < 0.02 * closes.iloc[-1] and (highs.iloc[-1] - lows.iloc[-1]) > 3 * abs(opens.iloc[-1] - closes.iloc[-1]):
                pattern = "Doji - Market indecision"
            elif closes.iloc[-1] > opens.iloc[-1] and opens.iloc[-1] < lows.iloc[-2] and closes.iloc[-1] > highs.iloc[-2]:
                pattern = "Bullish Engulfing - Possible upward reversal"
            elif closes.iloc[-1] < opens.iloc[-1] and opens.iloc[-1] > highs.iloc[-2] and closes.iloc[-1] < lows.iloc[-2]:
                pattern = "Bearish Engulfing - Possible downward reversal"
            elif (highs.iloc[-1] - max(opens.iloc[-1], closes.iloc[-1])) > 2 * abs(opens.iloc[-1] - closes.iloc[-1]) and (min(opens.iloc[-1], closes.iloc[-1]) - lows.iloc[-1]) < 0.1 * closes.iloc[-1]:
                pattern = "Shooting Star - Bearish signal"
            elif (min(opens.iloc[-1], closes.iloc[-1]) - lows.iloc[-1]) > 2 * abs(opens.iloc[-1] - closes.iloc[-1]) and (highs.iloc[-1] - max(opens.iloc[-1], closes.iloc[-1])) < 0.1 * closes.iloc[-1]:
                pattern = "Hammer - Bullish signal"

            if pattern:
                st.subheader("Candlestick Pattern")
                st.success(pattern)

            # Day Trading Patterns
            recent_gain = closes.iloc[-1] - opens.iloc[-1]
            previous_gain = closes.iloc[-2] - opens.iloc[-2]
            gap = opens.iloc[-1] - closes.iloc[-2]

            day_trade_signal = ""
            if gap > 0 and recent_gain > 0:
                day_trade_signal = "Gap Up + Bullish Close â€” Potential intraday momentum"
            elif gap < 0 and recent_gain < 0:
                day_trade_signal = "Gap Down + Bearish Close â€” Caution: possible selloff"
            elif abs(recent_gain) < 0.005 * closes.iloc[-1] and (highs.iloc[-1] - lows.iloc[-1]) > 0.02 * closes.iloc[-1]:
                day_trade_signal = "Inside Bar / Low Volatility â€” Watch for breakout"

            if day_trade_signal:
                st.subheader("Day Trading Signal")
                st.info(day_trade_signal)

            # Suggested Trade Entry and Stop Loss
            entry_price = closes.iloc[-1]
            stop_loss = lows.iloc[-1] - (0.05 * closes.iloc[-1])
            take_profit = closes.iloc[-1] + (0.02 * closes.iloc[-1])

            st.subheader("Trade Setup")
            st.write(f"**Suggested Entry:** ${entry_price:.2f}")
            st.write(f"**Stop Loss:** ${stop_loss:.2f}")
            st.write(f"**Take Profit (2R):** ${take_profit:.2f}")

            # P&L Predictions
            risk_per_share = entry_price - stop_loss
            reward_per_share = take_profit - entry_price
            max_loss = risk_per_share * shares
            max_gain = reward_per_share * shares

            st.subheader("P&L Prediction")
            st.write(f"**Maximum Loss:** ${max_loss:.2f}")
            st.write(f"**Maximum Gain:** ${max_gain:.2f}")

            st.subheader("P&L Visualization")
            st.bar_chart(pd.DataFrame({
                "Scenario": ["Maximum Loss", "Maximum Gain"],
                "P&L ($)": [max_loss, max_gain]
            }).set_index("Scenario"))
        except Exception as e:
            st.error(f"Error processing data: {e}")

    
